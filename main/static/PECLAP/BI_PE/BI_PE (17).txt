INTRODUCTON
The given study focuses on the development of the automated text document compliance assessment system.
Text processing, which refers to mechanizing the creation and manipulation of electronic texts, has always been one of the primary disciplines in computer science. It involves determining the quality of publications, identification of potential duplication, plagiarism, partial borrowings, classification and clustering of documents, formation of databases and extensive collections of texts. Despite the fact that document check in accordance with formatting rules does not imply detailed text processing, it should be noted that this procedure in one way or another is related to the general text analysis and has its own specific features.
Since the structure of research papers, dissertations, scientific publications, technical documents, etc. is a standard-based compulsory requirement, there is an ongoing need in the instrument allowing users to check the formatting of their work and automatically fix it if necessary. So the goal is to provide users with such functionality by creating a relevant software product which minimizes the time and effort required.
Undoubtedly, being involved in the field of academia, students are obligated to follow a number of various standards, and rules on text document formatting are an example of them. It is known that document check in accordance to these rules is considered to be extremely monotonous, and researchers, both students and teachers, are likely to appreciate the simplification of this process. That is why the idea of creating a practice-oriented system for automated compliance assessment appeared. 
It is assumed that the functionality of the software product is extended to the check of such formatting characteristics as page layout settings, styles parameters, headers and footers properties etc. In other words, the structure of a document (not its content) is to be checked.
To date, there are two basic instruments of text control on the absence of formatting errors and document verification in accordance with certain standards: ready-made formatting templates and software solutions which are used in the process document check.
Violation of document styling often occurs when text is copied into a document from sources with diverse formatting patterns. Although this issue can be partially solved by application of built-in styles, the probability of error still exists. That is why the usage of formatting templates is justified.
One of the means of creating such templates is a mark-up language DocBook, an application of XML/SGML, which provides a user with a unified set of tags for setting formatting of a text document. Similar approach is adopted by the LaTeX publishing system that allows modifying the document appearance by editing mark-up in a separate style file. In both cases the content of a document is isolated from its style representation which, as a result, can be controlled more efficiently. Nevertheless, working with LaTeX and DocBook documents requires a special development environment installed on a computer, and the process of creating a document may cause difficulties for users with no advanced knowledge in the field of information technologies.
The automation of compliance assessment is implemented in a number of software products, one of which is an intelligent web-based system for spell checking "Orogrammka". Text document check is performed in terms of the norms of grammar, punctuation and formatting rules. The service has an intuitive and simple interface, however, the text check is limited to a strictly predefined set of formatting rules without the possibility of its expanding.
Another tool for automated formatting rules check was developed on the basis of Volgograd State Technical University. This software product is a Microsoft Word 2007 add-in which allows checking documents and fixing detected errors. Yet, the service is accessible only for Microsoft Office Word users.
Overall, the analysis of the studies mentioned above highlights the need for the cross-platform software system that provides the extensive functionality of formatting rules check, yet, has a user-friendly interface appealing for a larger audience. The given work is to propose such a system.
This project provides teachers, students and technical writers with an important opportunity to be exempted from the obligation to work with long lists of formatting requirements and search for errors in document structure manually.
PROBLEM STATEMENT
Conformity of the text to the formatting rules is one of the priority requirements for documents reflecting the results of scientific, technical and engineering activities. Uniformity of appearance and structure of text documents is mandatory for any field of knowledge since such standardization allows easier understanding of information provided. In addition to that, strict adherence to standards simplifies the process of storing and processing documents in databases.
However, due to the fact that the process of formatting check is usually performed manually, extra requirements, such as increased attentiveness and fluency in formatting standards, are imposed on employees in companies or universities who are involved in compliance assessment procedures. Furthermore, manual check of text documents of large size and complex structure can be extremely laborious and time-consuming.
Achieving the efficiency of organizations’ business processes connected with document check might appear to be hardly possible if this approach is not reconsidered. Instead, the software product automating the verification of a text in accordance with certain formatting rules can be applied. Such a system will substantially reduce the amount of time and effort required for this procedure and eliminate the possibility of skipping a formatting error because of inadvertency or tiredness. 
OBJECTIVES AND AIMS
The central purpose of this work is to develop a system for automated text document compliance assessment according to specified formatting rules. In order to achieve the stated objective, a number of steps should be taken. First of all, the analysis of data sources on a given problem has to be carried out. The next stage involves an overview of existing systems for text processing and automated document validity control. It is followed by studying the subject area of text document formatting check and providing the description of it. After that, an application automating the compliance assessment has to be designed and programmatically implemented. On the last step technical documentation on the created software product is to be developed.
METHODS AND APPROACHES 
In order to perform text document check according to specified formatting rules, it was decided to apply an approach based on using the software solutions. This approach implies the development of an application for automating the control of document validity that helps reduce the complexity of operations executed by the user and the time required. 
Compliance assessment in accordance with formatting rules will be implemented for Open XML text documents or, to be more specific, for Microsoft Office Word files with the DOCX extension. Office Open XML (also known as OOXML or OpenXML) is a default file format of Microsoft Office electronic documents. The format is defined in the ISO/IEC 29500 standard [ISO/IEC 29500, 2015]. OOXML is a structured archived file in a ZIP format that contains markup text of a document in an XML format, graphical information and other data included in this text document.
The Open XML format includes a number of advantages. Firstly, it is the interoperability, or the capacity of the format to interact and function with a large set of both custom and commercial applications. It provides a high degree of compatibility of documents for different tasks. Moreover, Open XML is backward compatible which means that it provides the ability to transform MS-DOC files into Open XML format with high accuracy and then programmatically access the converted documents. Also, the integration of business data is important to consider Office applications support custom XML schemas that can extend the capabilities of the existing Office document types. Thus, users can export data from existing systems to the documents in the Office file formats. The feature of programmability allows creating documents in Open XML format on a software level with the use of ZIP and XML libraries. Finally, for storing documents Open XML format uses the technology of ZIP compression which provides the possibility of reducing the storage space.
A markup language for processing text files in the Open XML format is called WordprocessingML, and its structure is based upon a set of key elements including main document, comments, settings, endnotes, header/footer, styles, fonts table and document glossary. 
In the main document part paragraphs (w:p) and tables (w:tbl) can be child elements for document body (w:body), table cell (w:tc) or text box (w:txbxContent). Paragraphs, in their turn, are a run-level content container for text runs (w:r), or images – a VML document (w:pict) or a DrawingML object (w:drawing). Finally, sub-run-level content incorporates multiple text elements (w:t).
Formatting of a text document with the use of Microsoft Word refers to implementation of various styles with parameters included in styles.xml file of a document archive. This file contains data on styles of paragraphs, characters and tables, latent styles and standard settings of styles for an entire document (document defaults). Styles of paragraphs, characters and tables comprise information about current formatting of a document, whereas hidden styles are not used directly and serve primarily as a cache repository for style settings, for example, the ones copied from a template. Standard styles store default values for the entire document formatting. However, it should be noted that styles.xml file does not involve data on formatting of numbered and bulleted lists that is included in a special numbering.xml file.
The fact that content of a document can be formatted on multiple levels leads to a problem of determining a comprehensive set of formatting parameters used for a particular paragraph or a run of the text.
Thus, if it is needed to retrieve information about a paragraph (e.g. line spacing or indentation), the first aspect that has to be checked is direct formatting which is specified in a file called document.xml. Yet, paragraph parameters might not be indicated in this file, and, in this case, it is necessary to inspect the style which is referred to in paragraph properties. If this style does not contain data on the paragraph formatting, then the styles from which it inherits are to be checked. If this action did not bring any results, then the only option left is to process the contents of the node Global default, i.e. default settings of all styles in a document.
Similar approach is credible for checking text runs formatting (defining such font settings as size, name, etc.); the only difference is that character styles are put into consideration and they can also form an inheritance hierarchy.
Data on tables formatting is defined in styles with conditional formatting that specify the properties of rows and columns. Table styles are also inheritable. Text inside table cells is checked according to algorithms of determining formatting of paragraphs and runs. In case of numbering, each list item may include formatting from a paragraph, a numbering format in numbering.xml or a style that is indicated by this format.
Overall, the major difficulty of text document formatting check lies in determining precise formatting parameters for paragraphs, tables, numbering and runs of text for the purpose of conducting as extensive an analysis of conformity of a document to specified rules as possible.
In order to address this issue, Open XML SDK 2.5 for Microsoft Office will be used, and that, presumably, will make the work with WordprocessingML mark-up more efficient. Retrieval of information on document content formatting is to be performed by applying the FormattingAssembler module, which is a part of PowerTools for Open XML.
Open XML SDK built on the System.IO.Packaging API allows manipulating documents that adhere to the Office Open XML File Formats Specification, e.g. documents created with Microsoft Office applications. This package provides a set of strongly-typed classes to obtain data about the formatting of a document and makes it possible to modify an original document (for example, to add comments).
Despite the fact that .NET offers standard interop assemblies for working with Microsoft Office, the preference will be given to Open XML SDK. COM Interop (Component Object Model) provides an access to Word objects (sections, paragraphs, characters, etc.) and has functionality for creating and editing documents, however, it does not support server-side automation and processes documents markedly slower than SDK. 
On the whole, the study will be based on the application of the Open XML SDK combined with the FormattingAssembler module for inspection of an XML file of a text document. This method will be the most effective for spotting formatting errors in the mark-up of a document and correcting them. 
PREDICTED RESULTS
The tools and techniques described will make the system capable of performing a comprehensive text formatting analysis. The system will be designed and implemented as a ASP.NET web-application allowing users to work on the Internet. It is anticipated that the main structural elements of a document such as paragraphs, tables, lists, etc. will be checked in accordance with the parameters set by the user in advance. Compliance assessment of a document will result in creation of a new document with fixed formatting or in the form of comments added to the original document.
LIMITATIONS OF THE STUDY
The system will provide users with the set of standards containing the parameters for compliance assessment. However, due to the existence of a wide variety of formatting rules applied to documents of different subject areas, the task of collecting all these rules and storing them in the system’s database seems to be almost unattainable.
Therefore, the software product will be equipped with the function of customizing and adding new formatting standards. This feature will allow users to create and modify formatting rules on demand.
CONCLUSION
The present study sets out to design and develop a software system for automated text document compliance assessment. The check of a document structure will be performed according to the formatting rules pre-defined by the user. It is expected that the system will significantly reduce the complexity of operations performed and make the process of document check less time-consuming.
Previous studies show that there are two basic techniques of verification of a text document according to specified standards including the use of software solutions and the application of ready-made design templates. Formatting templates are efficient in isolating document’s structure from its content but not easy to work with for the general audience. Software solutions are considered to be more accessible, still not flexible enough. Thus, the distinct features of the system being developed will include the versatility of functions and a user-friendly interface.
The software program for automating the compliance assessment will be implemented as a ASP.NET web-application with the use of the Open XML SDK package and the FormattingAssembler module. These tools will allow checking the document structure via its mark-up and provide the broad access to the functionality of the system due to operating on the Internet. Since the application’s database cannot store all existing formatting standards, the feature of entering custom formatting rules will be added.
The system can be used by a wide range of users including students, teachers, technical writers in organizations, etc. for checking research papers, dissertations, scientific publications, and technical documents. Future research might focus on the document content analysis, so that not only the formatting of the electronic documents will be checked but also its semantics.
