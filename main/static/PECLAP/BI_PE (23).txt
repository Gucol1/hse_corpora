INTRODUCTION
Background. Smart devices are slowly integrating into our life, and they changed the way we interact with everything surrounding us. To make the surrounding environment really "smart", it's necessary to gather and analyze the data coming from those smart devices. And interpret, gathered data against the rules programmed in the IoT platform if we expect that our system has to automatically respond to external events. Using the rule composition functionality provided by IoT platforms, we could make our life simpler and secure via the automation of our everyday needs. However, programming of this behavior is currently a possibility available only for developers, or people with high technical skills, as it requires a strong knowledge of programming languages and used IoT platform. To make it easier for non-expert users to configure and extend the behavior of their smart devices, new approaches of rule creation process have to be conceived, based on new user-interface abstractions and easy-to-use interaction paradigms.
Problem Statement. A great deal of researches has been done to make smart environment concepts technically feasible, and easy to use for everyone, but they still offer limited benefits. Bringing this technology into our environments there are trade-offs between convenience and control. Existing smart systems are highly complex, especially in the web and mobile world and also likely to differ from each other, creating a wide range of completely different user interfaces offering the same thing. As well, users are also different in terms of their knowledge and use cases they want to solve. To decrease complexity, and make this technology more accessible for everyone, we need to introduce new user interface interaction paradigms to directly involve users without technical skills into building their smart office environment and help them configure the behavior of their smart devices. Hence, in the ideal scenario, when interacting with the application we shouldn't rely on our skills or capabilities, trying to customize the behavior of smart devices, connected to the IoT platform. The proposed research will be about an investigation of the abstractions needed for creating a smart interactive experience, and the development of a smart office application with smart rule builder using the web and native platforms to empower people with few or no technical skills to effectively "program" their working places.
Professional significance. The smart university is an interesting area that could be represented as an integration of multiple smart environments. Namely, there should be an IoT platform, smart devices, smart educational software, smart application for analyzing device data and creating specific rules, and technology-based teaching strategies. Thus, it can create a unique opportunity for new education approaches, setups for classrooms or laboratories, and potentially increase overall university security. Therefore, the results of this research can be used to develop a "smart system" and embed it in our university.
Delimitations of the study. The initial focus of this research will be solely on the analysis of existing smart applications and possible user interface abstractions, which could be used in creating a smart and easy-to-use user experience. Further work will be focused on the development of proof of concept IoT-based smart office application. The development will be accomplished following the classic software development life cycle described in a paper by Gurbaxani, Melville, et al. The complexity of creating a full-featured IoT platform is not in the scope of this research. Simple microservices with fake data will be created to demonstrate the proposed user interface and the communication of data with an application, but a complex smart office IoT system will not be built.
Definitions of Key Terms. 
IoT platform1 - is the heart of every smart system, bringing together the hardware, connectivity, software and application layers to offer an efficient solution for device management and configuration, data collection and analysis, smart rules creation and interpretation and enablement of applications as well as a connection with the cloud or on-site server.
Smart device2 - is a mechanical device that have been integrated with semiconductor computer chips (CPUs, memory and/or logic computer chips) in order to allow them to interface and communicate with other devices or with the Internet, in general.
LITERATURE REVIEW
In our study, we will mainly concentrate on the areas related to user interface interactions, such as monitoring data gathered from smart devices, and creating smart rules for orchestrating smart devices connected to the IoT platform. Thus, it is important to briefly explain why it's necessary to build an application accessible to everyone and walk through existing researches on this topic to analyze the current state of research.
B. R. Barricelli and S. Valtolina raise the question of how non-expert people could interact with smart devices. Their research is examining the application development for a smart environment that addresses the needs of non-expert people, to make this technology accessible for anyone. They also noted that people have changed the way they use mobile phones after the IoT coming. Thus, they consider that making the software accessible on mobile and sensor-based devices, so both sides of expert and non-expert users would get an equal opportunity of creating smart rules or configuring smart devices, becomes a crucial point for any proposed solution that affects future adoption of the developing solution.
A possible solution to the problem stated above described in a paper by A. K. Dey, T. Sohn, et al. To address the accessibility issues they built a system for prototyping possible visual interfaces by end-users. It lowers the barriers for everyone who interested in using or building smart applications, allowing them to quickly prototype user-interface without writing any lines of code. In particular, they noted that involving end-users in the application development phase and let them visually prototype part of the application is beneficial for the final result. And it would be better for future system adoption since users will be more familiar with the end solution.
Continuation of the work done by A. K. Dey, T. Sohn, et al., is made by J. Lee, L. Garduсo, et al. Their article is based on multiple types of research related to mobile-friendly user-interface development in a smart application context. They tend to think that the biggest issue in the IoT context is that developers wouldn't be able to predict all the potential issues end-users may encounter when creating complex rules or interacting with their environment via mobile phone. So involving the end-users into customization of mobile IoT application, is very positive on the overall solution, because developers would be familiar with the issues they need to solve. Thus, to address the issues in building mobile smart applications, they build a programming tool, called GALLAG Strip, which is similar to the solution presented by A. K. Dey, T. Sohn, et al., with the only difference in targeting mobile devices.
After analyzing proposed concepts related to the smart application development phase, we can proceed to the next step, namely, the approaches currently used in smart applications for the rule creation process.
The article by Gabriella Lucci and Fabio Paternт describes existing approaches to the smart rule creation process. In particular, they noted that nowadays end-users can describe device behavior by visually drawing the smart device interactions, e.g. using diagrams that make it easier to interpret how events and actions propagate between multiple devices or defining trigger-action rules, using already existing programming or specially created domain-specific languages. These methods are far from the ideal interaction paradigms in the mobile world suited for non-expert users. Thus, they conclude that we still could use them in applications, but we should consider new practices to involve non-expert users in the rule creation process.
An interesting approach on how to create a rule creation process more usable by non-expert people presented in the paper by D. Bonino, F. Corno, et al. The researchers tried to refactor current approaches of rules construction, and make it much more convenient. They suggest a proof-of-concept implementation of a rule builder, that targets non-expert users. It empowers the ideas of drag-and-drop interaction behavior, and relies on a real language rule grammar, for expressing triggers and actions. The key advantage of the presented user-interface is that it is using small building blocks, for rule description, which you can drag and drop on the canvas and easily build a smart rule algorithm. It also visually provides useful suggestions, trying to predict the next user build step, to make it easier to incrementally construct rules by non-expert users.
Although the system noted above is intended to be easy-to-use, it still uses a domain-specific language, based on a rule grammar, that is more suitable for developers to express the rules. Let's consider the trigger-action approach, G. Desolda, C. Ardito, et al. present research where they examine that, smart rules creation is often a difficult task for non-expert users. Even using a simplified version of a domain-specific language, possible errors in created smart rules still can lead to undefined behaviors in the IoT platform. Especially, they noticed, that going a step further in IoT technology adoption, we need something that will help end-users to fix and possibly avoid the issues they could encounter while creating smart rules.
C. Nandi and M. D. Ernst delve into the problem of smart rule analysis and validation. Their work has proved that non-expert user make wrong assumptions in writing trigger-action rules because their mental model isn't built on top of the programming ideas. Thus, it often leads to unexpected behavior in their smart environments. The authors present a tool, called TriGen, which allows us to make static analysis of written smart rules. Based on this analysis, it is possible to determine possible issues and prevent common errors at a rule-build time, allowing end-users without programming experience to address possible issues.
Given the recognized significance of the difficulties with the rule creation process that users with no technical skills may encounter, it is surprising that this problem has received remarkably little attention.
Speaking about existing real-world smart applications we could look on, that empowers the idea of accessibility for everyone, an interesting and free-to-use solution is a mobile application IFTTT presented in research by B. Ury, E. McManus, et al. (2014). It enables users to create and share with everyone simple "applets" based on a trigger-action rule paradigm that contains a single trigger (e.g., if something is not "X") and a corresponding action (e.g., make something with "Y"). The application simplicity makes it obviously very useful and easy to use. However, this also means that the application fails to cover a wide range of possible scenarios. The authors of the research collected qualitative data and noted that for about a fifth part of the scenarios, it is not sufficient having a single trigger and action. And it's obvious that the technology adoption will increase the complexity of the rules that users will try to solve.
A possible replacement to the current smart rule building approaches is the idea of visual programming. An example of such an idea is a framework called OpenBlocks presented in a paper by Roque, R.V. OpenBlocks is a visual code editor, which uses graphical programming blocks such as logical expression declarations, loop declarations, variable declarations, etc. It allows non-expert users without programming skills to apply principles that they are most familiar with. Linking together visual programming blocks is easier and could represent a foundation for the upcoming development of an easy-to-use smart rule builder. However, OpenBlocks is a Java-based framework, which means that it can target only PC's, so it will require a complete framework rewrite to make it run on the web and native environment. 
Thus, the purpose of this research is to get a deeper knowledge of how smart applications are built and, which accessibility issues users may encounter while interacting with an application or when creating a smart rule. As a result, we also will attempt to develop a smart office application with an easy-to-use smart rule builder as a possible solution in fixing these problems.
METHODS
Our study aims to develop a smart office equipment control application. Therefore, we are interested in analyzing how smart applications are used, especially how people interact with them, to derive the best practices from the existing applications and build an easy-to-use solution. To address this task, we attempt to use several research methods with a combination of analysis of existing solutions, object-oriented design, and application development.
Analysis of Existing Solutions
Grounded on the works of previous researches of Zdravkovic, Milan & Trajanovic, et al. and Nakhuva, Bhumi & Champaneria, et al., we will perform an initial data collection of existing IoT platforms and their key features. We also will perform an additional round of data collection to find possible analogs of IoT platforms developed by Russian companies.
Object-Oriented Design
For a better understanding of key features that we should inherit from existing applications, an in-depth analysis of the collected smart applications will be performed. The scope of the analysis will mainly include application info and specific details of the way application presenting data to the user. These topics will provide us with the most useful information needed for the research. 
Further, we can analyze our explorations to identify expected benefits and challenges that we should resolve. More information can be elicited from interviews or discussion groups. Additional research will be performed, based on gathered data, which will address future product design. Research should devise design principles and user-interface abstractions that should respect interface interactions for the user without technical skills or capabilities.
Grounded on the works of Waykar and Yashwant that UML diagrams are very important in software development, we'll use them for documenting internal application processes and specifying the technical specification of the upcoming smart system. The research specifically focuses on using only the following types of UML diagrams in this step: 
1. Use case diagram3 - used to describe a set of actions (use cases) that some system or systems (subject) should or can perform in collaboration with one or more external users of the system (actors).
2. Sequence diagram4 - used to describe an interaction by focusing on the sequence of messages that are exchanged, along with their corresponding occurrence specifications on the lifelines.
3. Activity diagram5 - used to show the flow of control or object flow with emphasis on the sequence and conditions of the flow.
4. Class diagram6 - used to show the structure of the designed system at the level of classes and interfaces, shows their features, constraints and relationships - associations, generalizations, dependencies, etc.
The resulting diagrams will help in the last task of this research - the development of smart office application.
Application Development
The app development will be accomplished with the help of Facebook's library called "React". Using such a library, the code is written once but the app can be deployed to multiple platforms, which in our case is essential since we are going to build an app on the web and native environment.
The development process will be based on Scrum methodology. This methodology is used by the top IT companies all over the world such as Google, Microsoft, Apple, etc. According to the Scrum specification, the work on the project is divided into sprints. Each sprint should include a small set of features that should be implemented by a group of developers in a limited amount of time. Each task that didn't complete on the corresponded sprint should be included in the next sprint. Thus, following the rules of Scrum methodology, it would be easier for us to develop the application in a more granular and incremental way.
EXPECTED OUTCOMES
As we already stated above, the purpose of this research is to develop a smart office equipment control application with an easy-to-use smart rule builder. To achieve this, we expect to shed a powerful light on existing smart applications and enhance our knowledge on how they are built, how they interact with the user and what features they provide, by presenting an in-depth analysis of smart applications. This analysis could stand as a theoretical base for future researches on this theme.
Upon the analyzing results, based on the data obtained an application will be developed that, on the one hand, would be easy to interact with for non-expert people, and on the other, it will be as efficient as current alternatives.
The results of this research will be presented to the faculty of economics, management and business informatics at the National Research University Higher School of Economics Perm.
CONCLUSION
In the framework of this research, the existing smart applications will be analyzed, the existing interaction techniques will be disclosed, the primary methods of modeling smart applications will be considered in detail, and a proof-of-concept application to showcase a new approach of rule creation process will be developed. The results obtained can be useful both for investigators dealing with smart office application development issues and for ordinary users, who are interested in building their smart applications.
