Introduction
Background. Nowadays digital electronics actively uses Field-Programmable Gate Array which may be reprogramed if it is necessary. Spaceship development is one of the fields where the possibility of changing an algorithm of device has a significant value. Self-catering machines need a high degree of stability without loss of speed and accuracy. Field-Programmable Gate Array is a good solution for this problem. The machine which has an ability to recover itself at runtime has the considerable benefit. In this case FPGA and build-in recovery tools give the opportunity to shift load from the burnt-out parts of chips to backup. FPGA are used not only in space technologies but also in other fields. For example, expensive custom chips production consumes many resources to create a pattern and this is the reason for its high costs. But these chips are very important for implementation new technologies which have not been in mass production yet or do not need it at all. Even small mistake in production may leads to huge damage. And using FPGA implementation is the solution.
Problem Statement. Minimizing Boolean functions is relevant to the process of programming Field-Programmable Gate Array. The mutual dependence of input and output signals of FPGA may be described by Boolean functions. Thus, minimizing Boolean functions for every FPGAs task can save speed, energy and other resources and make the chip more reliable. So, the problem is to minimize a partially specified Boolean function. The main task is to develop of a genetic algorithm for minimizing the partially defined Boolean functions.
Delimitations of the Study. All possible input options are important for chips not all time because not all task need so many options. In this way partially defined BF is more suitable. Basis is also significant for minimization BF problem and it does not depend on algorithm. In the course of research aimed at finding innovative approaches to ensuring the fault tolerance of digital equipment, was created the concept of a functionally complete tolerant element. Reduction resources of integral circuit achieved thanks using FCT-element like a basis because FCT-element combines disjunctions and conjunctions in one element. This feature becomes the advantage of this basis when creating and reconfigurating highly reliable FPGAs.
Professional Significance.
For now, exact algorithms for minimizing Boolean functions problem are existed but their speed is insufficient and not all of them can be applied for functionally complete logical tolerant element. In the same time approximate algorithms may give good results in less time. Genetic algorithm is one of the heuristic algorithms which are the popular approximate algorithms. GA may give a good result in optimization tasks. So, GA is one of the ways to solve minimization BF problem and this algorithm does not have any strong criteria for function setting method and basis, and data dimension constraint. And it is the reason why this project is actual.
Literature Review
Field-Programmable Gate Array is a flexible and high-speed chip. Such characteristics are achieved due to the fact that during the programming a device with the FPGA, the architecture is created from the basic logic elements which are included in this FPGA. These chips have an array of logical elements, several input-output blocks and communication lines between all these elements, which are controlled by a special device. As opposite to a microcontroller with a limited set of available solutions, the FPGA can solve any problem which can be described by a set of its logical elements. Thus, the only limitation of the FPGA is its content. As already mentioned, the FPGA consists of logical elements, and this is the reason why the tasks which solved by the chip can be described by using Boolean functions.
Thus, the Boolean function is one of the basic definitions in the investigated subject area, so I should include its precise definition. Further, the term "Boolean function" will be understood as follows: the function  of n arguments  is called a Boolean function (or logic algebra function), if for each set  it puts the number  in correspondence. In view of the fact that not in all real problems, each set of  has a practical importance, no less important that the BF which is not defined on some number  of its variable sets, is called partially defined BF (hereinafter, PDBF). It is also important that in the majority of problems associated with the BF or PDBF, especially if they assume further use in the reconfiguration of the FPGA, requires a minimum, which directly depends on the complexity of the used polynomial representation (polynomial) of the function, determined by the number of operations. The smaller is the complexity of the polynomial, the easier it is to perform the actions necessary to solve the problem over it, so in many cases it is required to use the polynomial of minimum complexity. For search of such polynomial there are exact and approximate methods of minimization of BF. But to solve the problem of minimization of any BF, regardless of the chosen method of solution, it is necessary to set the basis, which will determine the operations that are part of the polynomial representation of the BF. Universal basis, which consists of three elements: conjunctions, disjunctions, negation; can set the minimum polynomial for any BF, as all other operations can be represented through this basis.  But in recent studies aimed at finding unconventional approaches to provide fault-tolerance of digital equipment, the concept of a functionally complete tolerant element has been proposed. 
The use of FCT-element as a basis for BF is aimed at solving the problem of resource saving in the field of fault tolerance of digital equipment. Under fault tolerance, in turn, it is necessary to understand a kind of adaptation to failures of parts of equipment or to limitations of its functionality. The FCT-element basis can provide functional completeness at certain model of failures that gives the chance to restore partially logic of FPGA. As the models of constant single failures of inputs describes the most frequent kinds of failures, in the given work it is necessary to consider the FCT-element for this model. The function  (or )) defines a functionally complete tolerant element for the classical model of constant single input failures. The FCT-element, due to the combination of disjunctions and junctions, also reduces the hardware costs for implementing a large number of functions when creating digital devices. However, unfortunately, most of the algorithms to minimize BF is very difficult to apply in the basis of FCT elements, and in combination with the need to consider BF with a large number of arguments, the use of precise algorithms generally becomes impossible. Thus, one of the variants of solving the problem of minimizing the BF in the basis of the FCT-element can be one of the approximate algorithms, such as GA.
The genetic algorithm, which belongs to the number of heuristic algorithms, is one of the approximated methods of minimizing BF with a large number of arguments. GA, even in the conditions of one concrete task (in this work: the task of minimization of PDBF), does not define a concrete sequence of actions, performed over concrete structures of input data, but only sets certain rules of transformations. This feature of GA makes it flexible enough, and expands the area of its possible applications and, as a consequence, the accuracy of the result of its work becomes dynamic (depending on the implementation method). 
The basic idea of GA is based on Darwin's theory of evolution, describing the origin of species by natural selection. In the further description of GA, the following definitions will be used:
1. Species is a potential solution.
2. Descendant is an improved copy of a potential solution (parent).
3. Population is a set of potential solutions.
4. Ability is a quality.
5. Breeding is a selection of individuals.
6. Mutation is the usual improvement ("sexless" reproduction).
7. Cross-breeding (crossover) is an improvement by exchange of parts of genotype of two parent, in which two descendants are created ("sexual" reproduction).
8. Reproduction is a creation of one or more descendants from parent population by using iterative process of selection and improvement.
9. Genotype is a data structure of an individual which is used in the breeding process.
10. Gene is a certain position in genotype.
11. Generation is one cycle of selection, multiplication and updating of population (population in a cycle).
Genetic algorithm consists of several stages, which are described below. The solution of the GA task starts with the formation of the initial population, and the key actions: selection, crossing and mutation, they are repeated until the result is achieved or until preset conditions are met.
Each of the steps below performs the role required to achieve the correct result:
1. Formation of the initial population – creation of  individuals. If the parameters of "good" individuals are known, they can be included in the initial population, otherwise all individuals are defined by random parameters.
2. Selection - selection of individuals for the next generation based on previously calculated adaptation of individuals. For the next stages, both maximally adapted individuals and other members of the generation can be selected, depending on GA implementation.
3. Cross-breeding - exchange of genotype sections of two individuals for getting offspring. The plots can be obtained by dividing the parent area into one gene or two genes.
4. Mutation - random change of gene in genotype. It has a low probability but allows getting out of the local minimums.
The last three stages are repeated in a cycle until a result is achieved. The cycle can be limited by the number of iterations, the value of an individual's adaptability, etc. So, the steps of GA confirm that GA has more than one implementation method and the result depends on the selected criteria and parameters for each specific task.
Methods
My work will consist of different parts and for all of them I will need various methods. Analysis is significant for the part of my project which will include description of analogies and also important for analysis of subject area. Modelling will be used during all the time then I will develop my program for minimizing Boolean functions. The development includes design, programming and testing. After creating my program, I will find or generate testing data for the main goal of my project, which is connected with finding the most suitable options for genetic algorithm for minimшzing Boolean functions. At this stage I will use logical method to choose testing data which will help me to understand how my program work with different input data and is the results appropriate or not. Formalization and synthesis will be used at the last stage of my work then I will get a result of my program work with testing data. I will use different diagrams and analysis again to find the best parameters for my algorithm and understand is the main goal achieved or not.
Results Anticipated
Based on my last coursework results which had the same them but only one version of genetic algorithm I involve that my new program will operate with Boolean functions with a few some of variables. I also may assume that different options for every step of genetic algorithm will lead to more qualitative results and the program will minimize functions with more than 5 variables. By virtue of results which are described in “Evolutionary optimization algorithms for minimization problem of Boolean functions” I may assume that the best result will be received from genetic algorithm with the options such as crossover with two breaking points and mutation every about one third of the species. 
Conclusion
In conclusion, my work may be significant for people, who develop field-programmable gate arrays with functionally complied tolerant element. How I said there are not enough researches about minimization Boolean functions with this type of elements but using it may be the solution of the reconfiguration FPGA problem. So, my work may be useful for exploration this field. There are a plenty of researches about minimization Boolean functions, in some of them the problem is solved by genetic programming. But GA may has different options and there are many combinations of parameters which are not researched yet. Because of this my work is actual and may be employed in further researches which are connected with genetic programming and minimization Boolean functions. In general, the exploration this field is significant for digital electronic.

