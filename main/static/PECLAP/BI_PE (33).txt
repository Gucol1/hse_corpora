 
Literature Review
A. Augustus Devarajan and T. SudalaiMuthu propose a system that monitoring IaaS storage by ranking the files and get they quantities. That help to reduce usage space in storage servers and reduce number of duplicated files. Basically, they use K-means ranking Algorithm to rank different files. It might help it this work to develop and understand a monitoring function only for public cloud storages.
In the work by N. Ragavan featuring a Key-Hash Indexing method that make search files easier and faster. With this method system have a special hash-key folder that contains keywords for a data file. However, author use this method for indexing web pages.
The work of S. Raghavendra, S. Girish, C. M. Geeta, Buyya Rajkumar, K. R. Venugopal, S. S. Iyengar and L. M. Patnaik problematize a searching files in cloud storage by their keyword, basically they mentioned an ineffective of tree-based search. It has a performance problem in generating files indexes and requirement a lot of memory space to save these indexes. To solve the problem, they use IGSK (Index Generation on Split Keyword) to improve mentioned problem that they mentioned.
All mentioned works are concern about searching and indexing file, that will be a problem in development, because we need to develop a search function. Now there are several solutions for indexing files for different purposes. Most of mentioned works are close to our project as they indexing files located in online storages.
F. Chen, T. Xiang, X. Fu and W. Yu raise a file verification problem in cloud storages. When searching files in storage accessible to several users, we do not know if these files exist or not. For verification authors develop two search protocols: VFS and DiffVFS, that use one security level and multiple security level correspondingly.
R. K. Bedi, J. Singh and S. K. Gupta in their work have similar aim as ours, develop a service that interact with multiple cloud storages. However, they develop a service for mobile devices based on Android OS. In work of G. Andriani, E. Godoy, G. Koslovski, R. Obelheiro and M. Pillon was develop an architecture that synchronize files in OneDrive, DropBox and on local repositories.
In work by T. Xian-jun, L. Ying and L. Na describe a file monitoring system and how it works. This system divided into client part and server part. First part designed to monitoring files and generate monitoring records and send them to the server. Service receive records from client and manage them.
M. I. H. Sukmana, K. A. Torkura, F. Cheng, C. Meinel and H. Grauppner propose a unified logging system that helps to collect information an about multiple cloud storages and understand collected information for system that connects cloud storages. Unified logging system set an important data that have in common in Google Cloud Planform, Microsoft Azure and Amazon Web Services Simple Storage Service.
In the end we see that improvement of searching and monitoring files in public online storages is explored problem that have several solutions. It could be a mobile service for Android or special protocol that can use multiple users to work with files in cloud. For search files was used a various indexing method with help identify files storage and boost search speed.
Methods
To develop application specification, we will analyze current state of main problem by analyze how user usually interact with cloud storage and how user will interact with our system and analyze similar application that connect to different online repositories. We use UML diagrams for visualization of user interaction that will help us to understand how user interact with online repositories by yourself and by using special program. UML is a modeling language and provides visualization of design of a development system. For modeling user interaction with application and cloud storage we use sequence diagrams.
Next step will be finding way to connect to several online storages such as Google Disk, OneDrive and Yandex Disk. To solve this problem, we will read their API documentation understand how to connect and communicate with them. Also, we will find libraries that help to interact with storages.
We will use modeling UML diagrams in development part of our project that will help us to set components of development system and how they will communicate with each other and with cloud storages. For that will be created a class diagram, sequences diagrams and user case diagram.
Results Anticipated
As a result of analyzing of current state of mentioned problem shall develop a several sequence UML diagrams that shows how user today interact with several cloud storages and how user will interact with them with our system. Moreover, as a result of analyze will be including defined list of requirements for development system that will specify functional and non-functional requirements.
In the development part of work, we will create numerous diagrams using UML that include class diagrams, sequence diagrams and use case diagram. They will show and describe in with components of system made off and how they interact with each other and with cloud storages. 
The results of this work will be our working program and list of performed tests, that verify operativity of our program. These tests contain its purpose (what function it testing), expected result of test and actual result. If test was successful it tells that tested part of program works, if it fails that part of program has problems or bugs. Moreover, we will write a user manual that will help understand how to use program, how to connect to different cloud repositories.
Conclusion
In the conclusion of this work will be develop a web-application that connect to several cloud storages and search files in them, that will be later tested. Other than that, the result of this work will be list of tests and user manual. In the development we will learn how to work with technologies such as Elasticsearch, Docker and different API's that connect to cloud storage and improve knowledge about Java language.
In is possible in the future to improve application by adding new supported cloud storages that will include dedicated user data storage server and adding new functions for interactions with storages.
